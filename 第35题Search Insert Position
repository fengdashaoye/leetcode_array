题目描述:
Given a sorted array and a target value, return the index if the target is found. If not, 
return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0
思路:这种题目前肯定是要用二分查找的，但是需要注意的是各种边界，首先需要注意的是当数组的长度<=2时就用不着二分查找了
如果其长度大于2，用二分查找，此时如果找不到那么target位于初始2个值的前后中或者最后2个值的前后中。
代码:
public class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        if(nums.length <= 2){
            int result = 0;
            result = panduan(nums, target);
            return result;
        }
        while(high - low > 1){
            int medium = (low + high) / 2;
            if(target > nums[medium]){
                low = medium;
            }else if(target < nums[medium]){
                high = medium;
            }else{
                return medium;
            }
        }
        if(target <= nums[low]){
            return low;
        }
        if(target > nums[high]){
            return high+1;
        }
        return high;
        
    }
    
    public int panduan(int[] nums, int target){
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            if(target == nums[i]){
                result = i;
                return result;
            }
        }
        int low = 0;
        int high = nums.length-1;
        if(target <= nums[low]){
            return low;
        }
        if(target > nums[high]){
            return high + 1;
        }
        return high;
        
    }
}




