Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

这道题我的思路不是很好，先找到target所在的列，如果找不到就return false，如果找到，就用二分查找。时间有点慢
代码：
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return false;
        }
        if(target < matrix[0][0]){
            return false;
        }
        
        int row = matrix.length;
        int line = matrix[0].length;
        
        if(target > matrix[row - 1][line - 1]){
            return false;
        }
        
        boolean result = false;
        for(int i = 0; i < row; i++){
            if(target < matrix[i][0]){
                break;
            }else{
                if(target <= matrix[i][line - 1]){
                    
                    int low = 0;
                    int high = line - 1;
                    int middle = 0;
                    while(low <= high){//小于等于，不能小于，都则[[1]]对于1就出错了
                        middle = (low + high) / 2;
                        if(matrix[i][middle] == target){
                            result = true;
                            break;
                        }else if(target > matrix[i][middle]){
                            low = middle + 1;
                        }else{
                            high = middle - 1;
                        }
                    }
                    if(result == true){
                        break;
                    }
                }
            }
        }
        
        return result;
    }

}

这是别人的思路：
public boolean searchMatrix(int[][] matrix, int target) {
            int i = 0, j = matrix[0].length - 1;
            while (i < matrix.length && j >= 0) {
                    if (matrix[i][j] == target) {
                        return true;
                    } else if (matrix[i][j] > target) {
                        j--;
                    } else {
                        i++;
                    }
                }
            
            return false;
        }
        另一种很好的方法：
        Use binary search.

        n * m matrix convert to an array => matrix[x][y] => a[x * m + y]
        an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];
        class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int l = 0, r = m * n - 1;
        while (l != r){
            int mid = (l + r - 1) >> 1;
            if (matrix[mid / m][mid % m] < target)
                l = mid + 1;
            else 
                r = mid;
        }
        return matrix[r / m][r % m] == target;
    }
};
