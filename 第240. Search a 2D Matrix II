Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

思路：这道题全局搜索是愚蠢的，因为它给出了条件，每一行从左到右递增，每一列从上到下递增，我们需要找到两个坐标。
第一个为row_end，matrix[row_end + 1][0] > target && matrix[row_end][0] <= target，这样target只能在row_end(包含)上面行中。
第二个为line_end,matrix[0][line_end + 1] > target && matrix[0][line_end] <= target，这样target只能在line_end(包含)左边列中。
确定好这两个坐标后搜索的范围就大大缩小了。
然后target有可能在每一行中，对每一行利用二分搜索。
搜索速度逼近他们的最优值。

代码：
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return false;
        }
        int row = matrix.length;
        int line = matrix[0].length;
        int row_end = row - 1;
        int line_end = line - 1;
        while(row_end >= 0 && matrix[row_end][0] > target){
            row_end--;
        }
        if(row_end < 0){
            return false;
        }
        
        while(line_end >= 0 && matrix[0][line_end] > target){
            line_end--;
        }
        if(line_end < 0){
            return false;
        }
        
        for(int i = 0; i <= row_end; i++){
            if(panduan(matrix, i, line_end, target)){
                return true;
            }
        }
        return false;
    }
    public boolean panduan(int[][] matrix, int row, int line, int target){
        int low = 0;
        int high = line;
        int middle = -1;
        while(low <= high){
            middle = (low + high) / 2;
            if(matrix[row][middle] == target){
                return true;
            }else if(matrix[row][middle] < target){
                low = middle + 1;
            }else{
                high = middle - 1;
            }
        }
        return false;
    }
}


