题目:
Given m arrays, and each array is sorted in ascending order. Now you can pick up two 
integers from two different arrays (each array picks one) and calculate the distance. We define the distance 
between two integers 
a and b to be their absolute difference |a-b|. Your task is to find the maximum distance.
Example 1:
Input: 
[[1,2,3],
 [4,5],
 [1,2,3]]
Output: 4
Explanation: 
One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.
思路:我一开始的思路很简单，两种情况，第一种先找到最小值，再找最小值所在数组以外的最大值，求长度，第2中情况相反，先找到最大值，再找最大值
所在数组以外的最小值，求长度，再比较。
代码:
public class Solution {
    public int maxDistance(List<List<Integer>> arrays) {
        HashMap<Integer,Integer> min = new HashMap<Integer,Integer>();
        HashMap<Integer,Integer> max = new HashMap<Integer,Integer>();
        for(int i = 0; i < arrays.size(); i++){
            min.put((Integer)i,arrays.get(i).get(0));
        }
        for(int i = 0; i < arrays.size(); i++){
            max.put((Integer)i,arrays.get(i).get(arrays.get(i).size()-1));
        }
        int number1 = 0, number2 = 0;
        number1 = min_max(min, max);
        number2 = max_min(max, min);
        return number1 > number2 ? number1 : number2; 
    }
    
    public int min_max(HashMap<Integer,Integer> min,HashMap<Integer,Integer> max){
        int result = Integer.MAX_VALUE;
        int position = 0;
        for(int i = 0; i < min.size(); i++){//找到最小值及其坐标
            if(min.get(i) < result){
                result = min.get(i);
                position = i;
            }
        }
        
        int result2 = Integer.MIN_VALUE;
        for(int i = 0; i < max.size(); i++){
            if(i != position){//排除掉最小值所在的那一数组的最大值
                if(max.get(i) > result2){
                    result2 = max.get(i);
                }
            }
        }
        return (result2-result);
    }
    
    public int max_min(HashMap<Integer,Integer> max,HashMap<Integer,Integer> min){
        int result = Integer.MIN_VALUE;
        int position = 0;
        for(int i = 0; i < max.size(); i++){//找到最大值及其坐标
            if(max.get(i) > result){
                result = max.get(i);
                position = i;
            }
        }
        int result2 = Integer.MAX_VALUE;
        for(int i = 0; i < min.size(); i++){
            if(i != position){//排除掉最大值所在数组的最小值
                if(min.get(i) < result2){
                    result2 = min.get(i);
                }
            }
        }
        return (result-result2);
    }
}

这是别人的代码:
public class Solution {
    public int maxDistance(int[][] arrays) {
        int result = Integer.MIN_VALUE;
        int max = arrays[0][arrays[0].length - 1];
        int min = arrays[0][0];
        
        for (int i = 1; i < arrays.length; i++) {
            result = Math.max(result, Math.abs(arrays[i][0] - max));
            result = Math.max(result, Math.abs(arrays[i][arrays[i].length - 1] - min));
            max = Math.max(max, arrays[i][arrays[i].length - 1]);
            min = Math.min(min, arrays[i][0]);
        }
        
        return result;
    }
}

