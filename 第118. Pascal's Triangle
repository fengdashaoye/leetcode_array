Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
思路:这道题初始已看，感觉有点难，实际上很简单，首先头两行(行号0,1)单独读取，如果其行数大于3行时
我们可以发现，首尾(j=0,j=i)都为1，当j=1时为上一行的(第0列+第1列)，j=2时为上一行的(第1列+第2列)
代码:
public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(numRows <= 0){
            return list;
        }
        if(numRows == 1){
            List<Integer> content = new ArrayList<Integer>();
            content.add(1);
            list.add(content);
            return list;
        }
        if(numRows == 2){
            List<Integer> content = new ArrayList<Integer>();
            content.add(1);
            List<Integer> content2 = new ArrayList<Integer>();
            content2.add(1);
            content2.add(1);
            list.add(content);
            list.add(content2);
            return list;
        }
        List<Integer> content = new ArrayList<Integer>();
        content.add(1);
        List<Integer> content2 = new ArrayList<Integer>();
        content2.add(1);
        content2.add(1);
        list.add(content);
        list.add(content2);
        for(int i = 2; i < numRows; i++){//这是行
            List<Integer> result = new ArrayList<Integer>();
            int start = 0;//初始
            for(int j = 0; j <= i; j++){//这是列
                if(j == 0 || j == i){
                    result.add(1);
                }else{
                    int number = list.get(i-1).get(start)+list.get(i-1).get(start+1);
                    result.add(number);
                    start++;
                }
            }
            list.add(result);
        }
        return list;
    }
}

感觉其他人的思路和我差不多，都是两重循环，没有看到一重循环的。
