Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
与之前那道Combination Sum
之前那道题，允许自身重复：
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
其代码：
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        backtrack(result, new ArrayList<Integer>(), candidates, target, 0);
        return result;
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> content, int[] candidates,int target, int start){
        if(target > 0){
            for(int i = start; i < candidates.length; i++){
                content.add(candidates[i]);
                backtrack(result, content, candidates, target - candidates[i], i);
                content.remove(content.size() - 1);
            }
            
        }else if(target == 0){
            result.add(new ArrayList<Integer>(content));
        }
    }
}
这道题不允许自身重复，
所以，在for循环中，指标要向前加1，同时注意去重。这其实是一道深度优先遍历的问题，不断得深度优先遍历，path.remove(path.size() - 1);为回溯的一个
过程。
代码:
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs_com(candidates, 0, target, new ArrayList<Integer>(), res);
        return res;
    }
    void dfs_com(int[] cand, int cur, int target, List<Integer> path, List<List<Integer>> res) {
        if(target > 0){
            for(int i = cur; i < cand.length; i++){
                if(i > cur && cand[i] == cand[i-1]){
                    continue;
            }
            path.add(cand[i]);
            dfs_com(cand, i + 1, target - cand[i], path, res);
            path.remove(path.size() - 1);
            } 
        }else if(target == 0){
            res.add(new ArrayList(path));
            return;
        }else{
            return;
        }
    }
}
