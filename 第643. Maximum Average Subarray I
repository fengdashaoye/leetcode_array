Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
1 <= k <= n <= 30,000.
Elements of the given array will be in the range [-10,000, 10,000].
思路:最简单的方法可能是不断遍历，但是这是不可取的，因为这样会有很多重复的步骤，特别是还没有更新的最大子段和正在计算的字段存在重叠的时候
只需要加上差值(有可能正，有可能负)即可，如果不重叠，可以借助之前计算的结果，单纯加上最后一位的差值即可。但是我的方法还是慢
代码:
public class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int i = 0;
        int number = 0;
        int result = 0;
        for(i = 0; i < k; i++){
            result += nums[i];
        }
        
        int start = 0;
        i = 1;
        int middle = result;
        while(i <= nums.length-k){
            int weiyi = 0;
            if(i + k < start + 2*k){//不能<=，此部分为目前的最大字段和正在检查的字段存在重叠的部分
                middle = result;
                for(int j = start + k; j < i + k; j++){//为了减少重复计算
                    middle += (nums[j] - nums[start + weiyi]);
                    weiyi++;
                }
                if(middle > result){
                    result = middle;
                    start = i;
                }
                i++;
            }else{//正在检查的字段和目前得出的最大字段不存在重叠，但是计算该结果可以借助之前计算的结果。
                middle += (nums[i + k - 1] - nums[i - 1]);
                if(middle > result){
                    result = middle;
                    start = i;
                }
                i++;
            }
        }
        return result/(double)k;
        
        
    }
}

这是别人的算法
验算过了，用234512076357，k=4，是对的，1个循环遍历解决问题。其实我的想法和他也是比较类似的，我区分了重叠与不重叠的情况，其实不需要。因为每个
字段是要计算的，而他必与之前的计算结果重叠，所以不应该计算字段和时比较是否和原先最大字段是否重叠，反正总是要计算和的。且其与上一步计算结果重叠最大。
public class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int curr = 0;
        int max = Integer.MIN_VALUE;

        for(int i = 0; i < nums.length; i++){
        	curr += nums[i];
        	if(i - k  >=0) curr -= nums[i-k];
        	if(i >= k-1 )max = Math.max(curr,max);
        }
        return (double)max/k;
    }

}

