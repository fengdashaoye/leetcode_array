Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

考虑到测试集不一定将数组转了(遇到过测试集(1, 3, 5)).我们首先用二分法找到断点，然后分别对前后两端的数值使用二分法
代码:
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length <= 0){
            return -1;
        }
        if(nums.length < 3){
            for(int i = 0; i < nums.length; i++){
                if(nums[i] == target){
                    return i;
                }
            }
            return -1;
        }
        int low = 0;
        int left_high = fenlie(nums);
        int right_low;
        if(left_high == 0){
            if(left_high + 1 < nums.length && nums[left_high] < nums[left_high + 1]){
                right_low = 0;
            }else{
                right_low = fenlie(nums) + 1;
            }
        }else{
            right_low = fenlie(nums) + 1;
        }
        int high = nums.length - 1;
        int middle = 0;
        int result = -1;
        while(low <= left_high){
            middle = (low + left_high) / 2;
            if(nums[middle] == target){
                result = middle;
                break;
            }else if(nums[middle] < target){
                low = middle + 1;
            }else{
                left_high = middle - 1;
            }
        }
        if(result == -1){
            while(right_low <= high){
                middle = (right_low + high) / 2;
                if(nums[middle] == target){
                    result = middle;
                    break;
                }else if(nums[middle] < target){
                    right_low = middle + 1;
                }else{
                    high = middle - 1;
                }
            }
        }
        return result;
        
    }
    public int fenlie(int[] nums){
        int low = 0;
        int high = nums.length - 1;
        int lastNumber = nums[high];
        int middle;
        int result = 0;
        while(low <= high){
            middle = (low + high) / 2;
            if(middle > 0 && middle < nums.length && nums[middle] > nums[middle - 1] && nums[middle] > nums[middle + 1]){
                result = middle;
                break;
            }else if(nums[middle] > lastNumber){
                low = middle + 1;
            }else if(nums[middle] < lastNumber){
                high = middle - 1;
            }
        }
        return result;
    }
}
这是别人的思路:
public class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while (start <= end){
            int mid = (start + end) / 2;
            if (nums[mid] == target)
                return mid;
        
            if (nums[start] <= nums[mid]){//肯定只有下面这两种情况，即nums[start] <= nums[mid]或者nums[mid] <= nums[end]
                 if (target < nums[mid] && target >= nums[start]) 
                    end = mid - 1;
                 else
                    start = mid + 1;
            } 
        
            if (nums[mid] <= nums[end]){
                if (target > nums[mid] && target <= nums[end])
                    start = mid + 1;
                 else
                    end = mid - 1;
            }
        }
        return -1;
    }
}

