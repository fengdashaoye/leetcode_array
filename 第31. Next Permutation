Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

思路：一开始没看明白题目，后来看博客才知道是找下一个全排列，如
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
如果是1,2,3则变成1,3,2，如果是3,2,1，则变成1,2,3.
这道题的思路是这样的，从后往前找，找到一个升序的两个值，如对于6 5 4 8 7 5 1，找到4(坐标i为2)即可停止，因为4到8为升序。
然后从后往前找到第一个大于4的值，即为5，交换变成6,5,5,8,7,4,1.
最后将坐标i+1(包括i+1，不包括i)后面的节点变成升序就行。最后这一步为反转，只要设置low和high不断进行交换即可，因为原先为降序，
不断交换后就变成升序了。

代码：
class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length <= 1){
            return;
        }
        int start = nums[nums.length - 1];
        int position = -1;
        int result = -1;
        int i = nums.length - 2;
        for(; i >= 0; i--){
            position = i;
            if(nums[i] < start){
                result = nums[i];
                break;
            }else{
                start = nums[i];
            }
        }
        if(i < 0){
            start = 0;
            int last = nums.length - 1;
            while(start <= last){
                int temp = nums[start];
                nums[start] = nums[last];
                nums[last] = temp;
                start++;
                last--;
            }
            return;
        }
        for(i = nums.length - 1; i > position; i--){
            if(nums[i] > result){
                int temp = nums[i];
                nums[position] = temp;
                nums[i] = result;
                break;
            }
        }
        int low = position + 1;
        int high = nums.length - 1;
        while(low <= high){
            int temp = nums[low];
            nums[low] = nums[high];
            nums[high] = temp;
            low++;
            high--;
        }
        
    }
}
