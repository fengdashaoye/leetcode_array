Given an array of integers and an integer k, you need to find the number of unique k-diff pairs 
in the array. Here a k-diff pair is defined as 
an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.
Example 1:
Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:
Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:
Input: [1, 3, 1, 5, 4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
思路:这道题还挺简单的，主要是注意每一对k-diff是唯一的，比如对于[1,1,1,1,1]k=0时输出1，因为是唯一的。
代码:
public class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        if(k == 0){
            return same(nums);
        }
        List<Integer> list = quchong(nums);
        int count = 0;
        int length = list.size();
        for(int i = 0; i < length; i++){
            for(int j = i; j < length; j++){
                if(list.get(j) - list.get(i) > k){
                    break;
                }
                if(list.get(j) - list.get(i) == k){
                    count++;
                }
            }
        }
        return count;
        
    }
    public int same(int[] nums){
        int middle = 0;
        if(nums.length > 0){
            middle = nums[0];
        }
        int count = 0;
        int panduan = 0;
        for(int i = 1; i < nums.length; i++){
            if(nums[i] == middle){
                if(panduan == 0){
                    count++;
                    panduan = 1;
                }
            }else{
                middle = nums[i];
                panduan = 0;
            }
        }
        return count;
    }
    public List<Integer> quchong(int[] nums){
        List<Integer> list = new ArrayList<Integer>();
        int middle = 0;
        if(nums.length >= 1){
            list.add(nums[0]);
            middle = nums[0];
        }
        for(int i = 1; i < nums.length; i++){
            if(nums[i] != middle){
                list.add(nums[i]);
                middle = nums[i];
            }
        }
        return list;
    }
}


