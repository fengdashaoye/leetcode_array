In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix 
into a new one with different size but keep its original data.

You're given a matrix represented by a two-dimensional array, and two positive 
integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.

The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; 
Otherwise, output the original matrix.
Example 1:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
Output: 
[[1,2,3,4]]
Explanation:
The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.
Example 2:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
Output: 
[[1,2],
 [3,4]]
Explanation:
There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.

思路:最笨的一种思路，先判断能否变形，然后把原数组的内容放到动态数组里，再一次取出动态数组中的值放到新建的数组中。
代码:
public class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        if(nums == null || nums.length == 0){
            return nums;
        }
        if(nums.length * nums[0].length != r*c){
            return nums;
        }
        
        int row = nums.length;
        int col = nums[0].length;
        int[][] result = new int[r][c];
        ArrayList<Integer> list = new ArrayList<Integer>();
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                list.add(nums[i][j]);
            }
        }
        int number = 0;
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                result[i][j] = list.get(number);
                number++;
            }
        }
        return result;
        
        
    }
}
这是只需一个循环的思路:
public class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        if(nums == null || nums.length == 0){
            return nums;
        }
        if(nums.length * nums[0].length != r*c){
            return nums;
        }
        
        int row = nums.length;
        int col = nums[0].length;
        int[][] result = new int[r][c];
        for(int i = 0; i < r*c; i++){
            result[i/c][i%c] = nums[i/col][i%col];
        }
        return result;
        
        
    }
}

















