Given an integer array, 
you need to find one continuous subarray that if you only sort this 
subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.
Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.


没过的代码:
public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if(copy(nums)){
            return 0;
        }
        if(copy2(nums)){
            return nums.length;
        }
        int low = 0;
        int length = nums.length;
        for(int i = 1; i < length; i++){//从左到右找到断层
            if(nums[i] < nums[i-1]){
                low = i-1;
                break;
            }
        }
        int result = nums[low];
        int position = low;
        for(; position < length; position++){//从断层处往右找最小值。
            if(nums[position] < result){
                result = nums[position];
            }
        }
        int position2 = low;
        for(;position2 >= 0; position2--){//根据最小值从断层处往左找，直至某一值比之前那一段的最小值小
            if(result > nums[position2]){
                break;
            }
            low = position2;
        }
        while(low >= 1){
            if(nums[low] == nums[low-1]){
                low--;
            }else{
                break;
            }
        }
        if(low == 1 && nums[low] == nums[0]){
            low = 0;
        }
    
        
        
        int high = length-1;
        for(int i = length-1; i >= 1; i--){//从右往左找断层处
            if(nums[i] < nums[i-1]){
                high = i;
                break;
            }
        }
        result = nums[high];
        int position_high = high;
        int position_high_2 = high;
        for(; position_high >= 0; position_high--){//从断层处向左找最大值
            if(nums[position_high] > result){
                result = nums[position_high];
            }
        }
        for(;position_high_2 < length; position_high_2++){
            if(result < nums[position_high_2]){
                break;
            }
            high = position_high_2;
        }
        while(high < length - 1){
            if(nums[high] == nums[high+1]){
                high++;
            }else{
                break;
            }
        }
        if(high == length-2 && nums[high] == nums[length-1]){
            high = length-1;
        }
        
        return high - low - 1;
        
    }
    public boolean copy(int[] nums){
        int[] content = new int[nums.length];
        int[] content2 = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            content[i] = nums[i];
            content2[i] = nums[i];
        }
        boolean result = true;
        Arrays.sort(content2);
        for(int i = 0; i < nums.length; i++){
            if(content[i] != content2[i]){
                result = false;
                break;
            }
        }
        return result;
    }
    public boolean copy2(int[] nums){
        int[] content = new int[nums.length];
        int[] content2 = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            content[i] = nums[i];
            content2[i] = nums[i];
        }
        boolean result = true;
        Arrays.sort(content2);
        for(int i = 0,j = nums.length-1; i < nums.length; i++,j--){
            if(content[i] != content2[j]){
                result = false;
                break;
            }
        }
        return result;
    }
}

稍微改过后就能跑了:
public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if(copy(nums)){
            return 0;
        }
        if(copy2(nums)){
            return nums.length;
        }
        int low = 0;
        int length = nums.length;
        for(int i = 1; i < length; i++){//从左到右找到断层
            if(nums[i] < nums[i-1]){
                low = i-1;
                break;
            }
        }
        int result = nums[low];
        int position = low;
        for(; position < length; position++){//从断层处往右找最小值。
            if(nums[position] < result){
                result = nums[position];
            }
        }
        int position2 = low;
        for(;position2 >= 0; position2--){//根据最小值从断层处往左找，直至某一值比之前那一段的最小值小
            if(result >= nums[position2]){//最好是>=
                low = position2+1;
                break;
            }
            low = position2;
        }
        while(low >= 1){//注意这一块
            if(nums[low] == nums[low-1]){
                low--;
            }else{
                break;
            }
        }
        if(low == 1 && nums[low] == nums[0]){
            low = 0;
        }
    
        
        
        int high = length-1;
        for(int i = length-1; i >= 1; i--){//从右往左找断层处
            if(nums[i] < nums[i-1]){
                high = i;
                break;
            }
        }
        result = nums[high];
        int position_high = high;
        int position_high_2 = high;
        for(; position_high >= 0; position_high--){//从断层处向左找最大值
            if(nums[position_high] > result){
                result = nums[position_high];
            }
        }
        for(;position_high_2 < length; position_high_2++){
            if(result <= nums[position_high_2]){//最好是<=
                high = position_high_2-1;
                break;
            }
            high = position_high_2;
        }
        while(high < length - 1){//注意这一块
            if(nums[high] == nums[high+1]){
                high++;
            }else{
                break;
            }
        }
        if(high == length-2 && nums[high] == nums[length-1]){
            high = length-1;
        }
        
        return high - low + 1;
        
    }
    public boolean copy(int[] nums){
        int[] content = new int[nums.length];
        int[] content2 = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            content[i] = nums[i];
            content2[i] = nums[i];
        }
        boolean result = true;
        Arrays.sort(content2);
        for(int i = 0; i < nums.length; i++){
            if(content[i] != content2[i]){
                result = false;
                break;
            }
        }
        return result;
    }
    public boolean copy2(int[] nums){
        int[] content = new int[nums.length];
        int[] content2 = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            content[i] = nums[i];
            content2[i] = nums[i];
        }
        boolean result = true;
        Arrays.sort(content2);
        for(int i = 0,j = nums.length-1; i < nums.length; i++,j--){
            if(content[i] != content2[j]){
                result = false;
                break;
            }
        }
        return result;
    }
}



