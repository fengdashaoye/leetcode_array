Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets 
in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
这道题主要是基于3sum那到题的基础上解决的。
3sum那道题的题目是：
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array 
which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
其代码是:
public class Solution {
    List<List<Integer>> ret = new ArrayList<List<Integer>>();
    public List<List<Integer>> threeSum(int[] nums) {
        int position,start,end,length;
        Arrays.sort(nums);//先排序
        length = nums.length;
        if(length <3 || nums == null){
            return ret;
        }
        end = length -1;
        for(position = 0; position < length-2; position++){
            if(position > 0 && (nums[position] == nums[position-1])){//看i是否合适，往i+1方向看,i-1的方向不用看，因为往后遍历
                continue;
            }
            find(nums,position+1,length-1,nums[position]);
        }
            return ret;
    }
    public void find(int[] nums,int start,int end,int target){
        while(start < end){
            if(nums[start] + target + nums[end] == 0){//此处已将-1,-1*******2***这种情况包括了
                List<Integer> ans = new ArrayList<Integer>();
                ans.add(nums[start]);
                ans.add(target);
                ans.add(nums[end]);
                ret.add(ans);
                while(start < end && nums[start] == nums[start+1]){//将这些情况-1,-1,-1******2,2消除
                    start++;
                }
                while(start < end && nums[end] == nums[end-1]){
                    end--;
                }
                start++;//因为升序排列
                end--;
            }else if(nums[start] + target + nums[end] < 0){
                start++;
            }else{
                end--;
            }
                
        }
    }
}
我们要将4sum的问题转化为3sum的问题。
首先排序，将各种意外情况排除，然后进入3sum问题，其中target变成target - nums[i]，同时此函数的参数还要有此number,number[i]。
再然后将问题变成2sum的问题，重复上述过程，target再减小，此函数再增加参数number,在寻找最后两个数值时，以start为起点一步步往后遍历
当start为某值时就找是否存在符合情况的最后一值，从末尾往前遍历，然后更新start，再从后往前遍历符合情况的最后一值。
代码:
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        if(nums.length < 4 || 4 * nums[0] > target || 4 * nums[nums.length - 1] < target){
            return result;
        }
        int length = nums.length;
        int number;
        for(int i = 0; i < length - 1; i++){
            number = nums[i];
            if(i > 0 && number == nums[i - 1]){//避免重复
                continue;
            }
            if(number + 3 * nums[length - 1] < target){//过小
                continue;
            }
            if(4 * number > target){//过大,后面不再有了
                break;
            }
            if(4 * number == target){//看其接下来3个是否也等于number
                if(i + 3 < length && nums[i + 3] == number){
                    result.add(Arrays.asList(number, number, number, number));
                    break;//再后面不会再有了。
                }
            }
            threesum(result, nums, i + 1, length - 1, target - nums[i], nums[i]);//凑到3sum，那么根据那边的算法，还需要2sum,因为是两边移动
            
        }
        return result;
    }
    public void threesum(List<List<Integer>> result, int[] nums, int start, int end, int target, int content){
        if(start + 1 >= end){
            return;
        }
        int maxNumber = nums[end];
        if(3 * nums[start] > target || 3 * maxNumber < target){
            return;
        }
        int number;
        for(int i = start; i < end; i++){
            number = nums[i];
            if(i > start && nums[i] == nums[i - 1]){
                continue;
            }
            if(number + 2 * maxNumber < target){//number太小
                continue;
            }
            if(3 * number > target){//number太大
                break;
            }
            if(3 * number == target && i + 1 < end && nums[i + 2] == number){
                result.add(Arrays.asList(content, number, number, number));
                break;
            }
            twosum(result, nums, i + 1, end, target - number, number, content);
        }
    }
    public void twosum(List<List<Integer>> result, int[] nums, int start, int end, int target, int content1, int content2){
        if(start >= end){
            return;
        }
        int maxNumber = nums[end];
        if(2 * nums[start] > target || 2 * maxNumber < target){
            return;
        }
        int number;
        for(int i = start; i < end; i++){
            number = nums[i];
            if(i > start && nums[i] == nums[i - 1]){
                continue;
            }
            if(number + maxNumber < target){//number太小
                continue;
            }
            if(2 * number > target){//number太大
                break;
            }
            if(2 * number == target && i < end && nums[i + 1] == number){
                result.add(Arrays.asList(content2, content1, number, number));
                break;
            }
            int m = end;
            while(m > i){
                if(number + nums[m] > target){
                    m--;
                }else if(number + nums[m] == target){
                    result.add(Arrays.asList(content2, content1, number, nums[m]));
                    break;
                }else{
                    break;
                }
            }
        }
    }
}


