Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary 
representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a 
single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
Credits:
Special thanks to @ syedee for adding this problem and creating all test cases.

思路：分别将每个数字转换成二进制，计算其1的个数，这是最笨的方法。。
这道题还应该是动态规划问题，前面的计算结果应该是有用的。

代码：
class Solution {
    public int[] countBits(int num) {
        int[] result = new int[num + 1];
        for(int i = 0; i <= num; i++){
            result[i] = calculate(i);
        }
        return result;
    }
    public int calculate(int num){
        int content = 0;
        while(num > 0){
            int shang = num / 2;
            int yu_shu = num % 2;
            if(yu_shu == 1){
                content++;
            }
            num = shang;
        }
        return content;
    }
}
思路：
An easy recurrence for this problem is f[i] = f[i / 2] + i % 2.
只是二进制中1的个数，所以i的1的个数等于i/2中1的个数+它%2(若i % 2 == 0,f[i] = f[i / 2],否则，f[i] = f[i / 2] + 1)

public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}

