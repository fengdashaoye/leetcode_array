Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), 
where h is the height of the person and k is the number of people in front of this person who have a height greater than or 
equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.


Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

思路：这道题没有什么想法。
大神的思路是
首先对二维数组进行排序，身高高的优先排在前面，如果身高一样，k值小的排在前面
然后我们新建一个空的数组，遍历之前排好序的数组，然后根据每个元素的第二个数字，将其插入到res数组中对应的位置
代码：
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        if(people == null || people.length == 0){
            return people;
        }
        Arrays.sort(people, new Comparator<int[]>(){//对二维数组进行排序，身高高的优先排在前面，如果身高一样，k值小的排在前面
            public int compare(int[] o1, int[] o2){
                if(o1[0] != o2[0]){
                    return o2[0] - o1[0];
                }else{
                    return o1[1] - o2[1];
                }
            }
        });
        //然后我们新建一个空的数组，遍历之前排好序的数组，然后根据每个元素的第二个数字，将其插入到res数组中对应的位置
        List<int[]> res = new LinkedList<>();
        for(int[] cur : people){
            res.add(cur[1], cur);
        }
        return res.toArray(new int[people.length][]);
        
        
    }
    
}
