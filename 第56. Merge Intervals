Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

注意是interval类型，首先根据每一组的第一个数值排序，这很重要。然后不断比较边界，首先比较intervals.get(end).end >= intervals.get(i+1).start
是否存在包含关系，如果满足，比较intervals.get(end).end <= intervals.get(i+1).end看这个集合的末尾(最大值是在哪)，
因为存在这种[[1,4][2,3]]这种输出[1,4],如果是[[1,4][2,5]]，则输出[1,5]

代码：
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        int length = intervals.size();
        if(length < 2){//[[1,4][1,4]]问题出在这，是<2，不是<=2
            return intervals;
        }
        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        int start = 0;
        int end = 0;
        for(int i = 0; i < length; i++){
            if(i < length - 1){
                if(intervals.get(end).end >= intervals.get(i+1).start){//这里不是intervals.get(i).end >= intervals.get(i+1).start
                    if(intervals.get(end).end <= intervals.get(i+1).end){//一定要放在上面条件的里面，否则[[1,4][2,3]],[[1,4][1,4]]有问题
                        end = i + 1;
                    }
                }else{
                    result.add(new Interval(intervals.get(start).start, intervals.get(end).end));
                    start = i + 1;
                    end = i + 1;
                }
            }else{
                result.add(new Interval(intervals.get(start).start, intervals.get(end).end));
            }
        }
        return result;
        
    }
}
