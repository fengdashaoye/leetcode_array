You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you 
should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.

这个问题其实可以分解为两个问题：

计算加上符号后正数或者负数之和应该为多少；
用数组中的数有多少种方法可以加起来等于上面计算出的和。
对于第一个问题，我们来分析一下。由于只有正负两种符号，最后分配符号后数组中的元素可以分为整数之和与负数之和，他们两个相加等于目标数，即：

sum（正） - sum（负） = target

两边都加上同样的sum（正） + sum（负）：

sum（正） + sum（负） + sum（正） - sum（负） = target + sum（正） + sum（负）

化简得：

2 * sum（正） = target + sum（正） + sum（负） = target + sum（数组总和）

那么我们可以惊讶的得出一个结论，都加上符号后，所有正数的和等于目标数加上数组所有元素之和。通过这个公式我们首先可以简单的判断出找不
到结果的情况，也就是数组总和小于目标数或者目标数加上数组所有元素之和除以2不能整除时，都无法找到分配符号的方法。而且最后所有分配了 + 的元
素之和一定等于目标数加上数组所有元素之和的一半。
如果数组总和小于目标数，就是全部加多没有可行解，因为target + sum = 2 * sum（正），所以如果target + sum % 2 > 0,则没有可行解。。

现在我们知道所有正数相加应该等于多少了，剩下的就是第二个问题，使用数组中的元素有多少种方法相加得到这个正数和？

这里我们用一种非常巧妙的记录方式：对于每个元素，我们看看他与正数和只差是多少，这个结果处有没有其余的元素，没有我们就减一看看有没有其他元素，
没有继续减一，直到见到0，这时候其实就是它自己了。对下一个元素依然这样判断。我们用一个标记来记录从0到正数和之间每个数当前用别的元素相加后能得
到的个数，最后遍历完所有元素后，看看正数和记录了多少种其余元素相加得到的次数，就是我们要的方法数了。

举例说明: nums = {1,2,3,4,5}, target=3，一种可行的方案是+1-2+3-4+5 = 3
求解nums中子集合只和为sum(P)的方案个数(nums中所有元素都是非负)

      该问题可以通过动态规划算法求解

      举例说明：给定集合nums={1,2,3,4,5}, 求解子集，使子集中元素之和等于9 = new_target = sum(P) = (target+sum(nums))/2

              定义dp[10]数组, dp[10] = {1,0,0,0,0,0,0,0,0,0}

              dp[i]表示子集合元素之和等于当前目标值的方案个数, 当前目标值等于9减去当前元素值

              当前元素等于1时，dp[9] = dp[9] + dp[9-1]

                                            dp[8] = dp[8] + dp[8-1]

                                            ...

                                            dp[1] = dp[1] + dp[1-1]

              当前元素等于2时，dp[9] = dp[9] + dp[9-2]

                                            dp[8] = dp[8] + dp[8-2]

                                            ...

                                            dp[2] = dp[2] + dp[2-2]

              当前元素等于3时，dp[9] = dp[9] + dp[9-3]

                                            dp[8] = dp[8] + dp[8-3]

                                            ...

                                            dp[3] = dp[3] + dp[3-3]

              当前元素等于4时，

                                            ...

              当前元素等于5时，

                                           ...

                                           dp[5] = dp[5] + dp[5-5]

             最后返回dp[9]即是所求的解

代码：
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        
        for(int num : nums){
            sum += num;
        }
        if(sum < S || (sum + S) % 2 > 0){
            return 0;
        }
        
        return subsetSum(nums, (sum + S) / 2);//(nums + S) == 选取出的正数之和
    }
    public int subsetSum(int[] nums, int sum_positive){
        int[] dp = new int[sum_positive + 1];
        dp[0] = 1;// 初始记录0的位置为1
        for(int num : nums){
            // 对每个元素，看看他现有能和别的元素相加得到哪些位置的数
            //如对于dp[9]，子元素之和为9，每次dp[9] += dp[i - num],其实为dp[9]以前的方案值加上dp[9 - num],即和为9 - num的方案值，因为
            //9 - num的方案数目就是9 - num后加上num即可得到9的方案值。
            for(int i = sum_positive; i >= num; i--){
                dp[i] += dp[i - num];
            }
        }
        return dp[sum_positive];
    }
}


