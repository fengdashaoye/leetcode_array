There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

思路：最笨的思路，将他们合并完成后再找中间值，嗯，应该是非常笨的方法。14.31%。
别人的思路：
方案2：我们可以发现，现在我们是不需要“排序”这么复杂的操作的，因为我们仅仅需要第k大的元素。我们可以用一个计数器，
记录当前已经找到第m大的元素了。同时我们使用两个指针pA和pB，分别指向A和B数组的第一个元素。使用类似于merge sort的原理，
如果数组A当前元素小，那么pA++，同时m++。如果数组B当前元素小，那么pB++，同时m++。最终当m等于k的时候，就得到了我们的答案——O(k)时间，O(1)空间。
但是，当k很接近于n的时候，这个方法还是很费时间的。当然，我们可以判断一下，如果k比n/2大的话，我们可以从最大的元素开始找。但是如果我们要找
所有元素的中位数呢？时间还是O(n/2)=O(n)的。有没有更好的方案呢？
我们可以考虑从k入手。如果我们每次都能够剔除一个一定在第k大元素之前的元素，那么我们需要进行k次。但是如果每次我们都剔除一半呢？

代码：
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length == 0 && nums2.length != 0){
            if(nums2.length % 2 == 0){
                int low = 0;
                int high = nums2.length - 1;
                while(high - low > 1){
                    low++;
                    high--;
                }
                return (double)(nums2[low] + nums2[high]) / 2;
            }else{
                if(nums2.length == 1){
                    return (double)nums2[0];
                }else{
                    int low = 0;
                    int high = nums2.length - 1;
                    while(low < high){
                        low++;
                        high--;
                    }
                    return (double)nums2[low];
                }
            }
        }
        if(nums2.length == 0 && nums1.length != 0){
            if(nums1.length % 2 == 0){
                int low = 0;
                int high = nums1.length - 1;
                while(high - low > 1){
                    low++;
                    high--;
                }
                return (double)(nums1[low] + nums1[high]) / 2;
            }else{
                if(nums1.length == 1){
                    return (double)nums1[0];
                }else{
                    int low = 0;
                    int high = nums1.length - 1;
                    while(low < high){
                        low++;
                        high--;
                    }
                    return (double)nums1[low];
                }
            }
        }
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        int count = 0;
        for(int i = 0; i < nums1.length; i++){
            while(count < nums2.length && nums2[count] < nums1[i]){
                list.add(nums2[count]);
                count++;
            }
            list.add(nums1[i]);
        }
        while(count < nums2.length){//避免这种[1, 2],[3, 4]这种，即nums1循环完了，nums2还没有循环完
            list.add(nums2[count]);
            count++;
        }
        if(list.size() % 2 == 0){
            int low = 0;
            int high = list.size() - 1;
            while(high - low > 1){
                low++;
                high--;
            }
            return (double)(list.get(low) + list.get(high)) / 2;
            
        }
        int low = 0;
        int high = list.size() - 1;
        while(low < high){
            low++;
            high--;
        }
        return (double)list.get(low);
        
    }
}
